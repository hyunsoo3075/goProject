{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hyunsoo3075\\\\Desktop\\\\HW\\\\GoPractice\\\\goproj\\\\client\\\\src\\\\components\\\\single-menu-item.component.js\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button, Card, ListGroupItem, ListGroup } from 'react-bootstrap';\nimport React from 'react';\nimport \"./orders.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Menu = _ref => {\n  let {\n    menuData,\n    updateDish,\n    setAddNewOrder\n  } = _ref;\n\n  function updateNewOrder(info) {\n    setAddNewOrder(true);\n    console.log(info);\n  }\n\n  return (\n    /*#__PURE__*/\n    //todo find a way to update parents dish state from this child component\n    _jsxDEV(\"div\", {\n      className: \"card\",\n      onClick: () => updateNewOrder(menuData),\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '18rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n          variant: \"top\",\n          src: \"holder.js/100px180?text=Image cap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: menuData !== undefined && menuData.dish\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: menuData !== undefined && menuData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n          className: \"list-group-flush\",\n          children: [/*#__PURE__*/_jsxDEV(ListGroupItem, {\n            children: [\"location: \", menuData !== undefined && menuData.zipcode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            children: [\"Chef: \", menuData !== undefined && menuData.chef]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            children: menuData !== undefined && menuData.price\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this)\n    /* <Row>\r\n        <Col>Dish:{ menuData !== undefined && orderData.dish}</Col>\r\n        <Col>Price: ${menuData !== undefined && orderData.price}</Col>\r\n        \r\n        {/* <Col><Button onClick={() => changeWaiter()}>change waiter</Button></Col>\r\n        <Col><Button onClick={() => changeOrder()}>change order</Button></Col>\r\n    </Row> */\n\n  );\n\n  function updateCurrentDish() {\n    updateDish(prevState => ({\n      \"dish\": menuData.dish,\n      \"name\": prevState,\n      \"chef\": \"\",\n      \"price\": 0\n    }));\n  }\n};\n\n_c = Menu;\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["C:/Users/hyunsoo3075/Desktop/HW/GoPractice/goproj/client/src/components/single-menu-item.component.js"],"names":["Button","Card","ListGroupItem","ListGroup","React","Menu","menuData","updateDish","setAddNewOrder","updateNewOrder","info","console","log","width","undefined","dish","description","zipcode","chef","price","updateCurrentDish","prevState"],"mappings":";AAAA,OAAO,kCAAP;AAEA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,aAAtB,EAAqCC,SAArC,QAAsD,iBAAtD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,cAAP;;;AAEA,MAAMC,IAAI,GAAG,QAA4C;AAAA,MAA3C;AAACC,IAAAA,QAAD;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA;AAAvB,GAA2C;;AACrD,WAASC,cAAT,CAAwBC,IAAxB,EAA6B;AACzBF,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH;;AACD;AAAA;AACI;AACA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,OAAO,EAAE,MAAMD,cAAc,CAACH,QAAD,CAAnD;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEO,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA,gCACI,QAAC,IAAD,CAAM,GAAN;AAAU,UAAA,OAAO,EAAC,KAAlB;AAAwB,UAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD,CAAM,IAAN;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA,sBAAcP,QAAQ,KAAKQ,SAAb,IAA0BR,QAAQ,CAACS;AAAjD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,IAAN;AAAA,sBACMT,QAAQ,KAAKQ,SAAb,IAA0BR,QAAQ,CAACU;AADzC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAQQ,QAAC,SAAD;AAAW,UAAA,SAAS,EAAC,kBAArB;AAAA,kCACI,QAAC,aAAD;AAAA,qCAA0BV,QAAQ,KAAKQ,SAAb,IAA0BR,QAAQ,CAACW,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,aAAD;AAAA,iCAAuBX,QAAQ,KAAKQ,SAAb,IAA0BR,QAAQ,CAACY,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,aAAD;AAAA,sBAAiBZ,QAAQ,KAAKQ,SAAb,IAA0BR,QAAQ,CAACa;AAApD;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AA0BI;AACZ;AACA;AACA;AACA;AACA;AACA;;AAlCI;;AAqCA,WAASC,iBAAT,GAA4B;AACxBb,IAAAA,UAAU,CAACc,SAAS,KAAG;AACnB,cAAQf,QAAQ,CAACS,IADE;AAEnB,cAAOM,SAFY;AAGnB,cAAQ,EAHW;AAInB,eAAS;AAJU,KAAH,CAAV,CAAV;AAQH;AAGJ,CAtDD;;KAAMhB,I;AAwDN,eAAeA,IAAf","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport {Button, Card, ListGroupItem, ListGroup } from 'react-bootstrap'\r\n\r\nimport React from 'react'\r\n\r\nimport \"./orders.css\"\r\n\r\nconst Menu = ({menuData, updateDish, setAddNewOrder}) => {\r\n    function updateNewOrder(info){\r\n        setAddNewOrder(true)\r\n        console.log(info)\r\n    }\r\n    return (\r\n        //todo find a way to update parents dish state from this child component\r\n        <div className='card' onClick={() => updateNewOrder(menuData)}>\r\n            <Card style={{ width: '18rem'}} >\r\n                <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" />\r\n                <Card.Body>\r\n                    <Card.Title>{ menuData !== undefined && menuData.dish}</Card.Title>\r\n                    <Card.Text>\r\n                        { menuData !== undefined && menuData.description}  \r\n                    </Card.Text>\r\n                </Card.Body>\r\n                    <ListGroup className=\"list-group-flush\">\r\n                        <ListGroupItem>location: {menuData !== undefined && menuData.zipcode}</ListGroupItem>\r\n                        <ListGroupItem>Chef: { menuData !== undefined && menuData.chef}</ListGroupItem>\r\n                        <ListGroupItem>{ menuData !== undefined && menuData.price}</ListGroupItem>\r\n                    </ListGroup>\r\n                \r\n            </Card>\r\n        </div>\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            \r\n            /* <Row>\r\n                <Col>Dish:{ menuData !== undefined && orderData.dish}</Col>\r\n                <Col>Price: ${menuData !== undefined && orderData.price}</Col>\r\n                \r\n                {/* <Col><Button onClick={() => changeWaiter()}>change waiter</Button></Col>\r\n                <Col><Button onClick={() => changeOrder()}>change order</Button></Col>\r\n            </Row> */\r\n        \r\n    )\r\n    function updateCurrentDish(){\r\n        updateDish(prevState=>({\r\n            \"dish\": menuData.dish, \r\n            \"name\":prevState, \r\n            \"chef\": \"\", \r\n            \"price\": 0\r\n        }));\r\n            \r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Menu"]},"metadata":{},"sourceType":"module"}